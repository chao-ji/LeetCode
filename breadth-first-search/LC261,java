import java.util.*;

public class LC261
{
	public static void main(String[] args)
	{
	}

	// 261. Graph Valid Tree
	static boolean validTree(int n, int[][] edges)
	{
		if (n - 1 != edges.length)
			return false;

		List<List<Integer>> adj = new ArrayList<List<Integer>>();
		Deque<Integer> queue = new ArrayDeque<Integer>();
		boolean[] visited = new boolean[n];

		for (int i = 0; i < n; i++)
			adj.add(new ArrayList<Integer>());

		for (int i = 0; i < edges.length; i++)
		{
			adj.get(edges[i][0]).add(edges[i][1]);
			adj.get(edges[i][1]).add(edges[i][0]);
		}   

		queue.addLast(0);
		visited[0] = true;
		while (!queue.isEmpty())
		{
			int node = queue.removeFirst();
			for (int i = 0; i < adj.get(node).size(); i++)
				if (!visited[adj.get(node).get(i)])
				{
					queue.addLast(adj.get(node).get(i));
					visited[adj.get(node).get(i)] = true;
				}
		}
		
		for (int i = 1; i < n; i++)
			if (!visited[i])
				return false;
		return true;        
	}
}
